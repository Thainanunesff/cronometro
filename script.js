// Vari√°veis globais para controlar o cron√¥metro
let currentTime = 0; // Tempo atual em segundos
let isRunning = false; // Se o cron√¥metro est√° rodando
let lastRecordedTime = 0; // √öltimo tempo que foi resetado
let intervalId = null; // ID do setInterval para poder parar depois

// Elementos do DOM - pego eles uma vez s√≥ no in√≠cio para performance
const hoursElement = document.getElementById('hours');
const minutesElement = document.getElementById('minutes');
const secondsElement = document.getElementById('seconds');
const startStopBtn = document.getElementById('startStopBtn');
const resetBtn = document.getElementById('resetBtn');
const statusDot = document.getElementById('statusDot');
const statusText = document.getElementById('statusText');
const lastTimeSection = document.getElementById('lastTimeSection');
const lastTimeValue = document.getElementById('lastTimeValue');

// Fun√ß√£o para formatar o tempo - aprendi que √© melhor separar a l√≥gica
function formatTime(totalSeconds) {
    const hours = Math.floor(totalSeconds / 3600);
    const minutes = Math.floor((totalSeconds % 3600) / 60);
    const seconds = totalSeconds % 60;
    
    return {
        hours: hours.toString().padStart(2, '0'),
        minutes: minutes.toString().padStart(2, '0'),
        seconds: seconds.toString().padStart(2, '0')
    };
}

// Fun√ß√£o para atualizar o display do tempo na tela
function updateDisplay() {
    const time = formatTime(currentTime);
    hoursElement.textContent = time.hours;
    minutesElement.textContent = time.minutes;
    secondsElement.textContent = time.seconds;
}

// Fun√ß√£o para atualizar o status visual (rodando/pausado)
function updateStatus() {
    if (isRunning) {
        statusDot.classList.add('running');
        statusText.textContent = 'Em execu√ß√£o';
        
        // Muda o bot√£o para "Parar"
        startStopBtn.classList.add('stop');
        startStopBtn.innerHTML = '<i data-lucide="pause"></i><span>Parar</span>';
    } else {
        statusDot.classList.remove('running');
        statusText.textContent = 'Pausado';
        
        // Muda o bot√£o para "Iniciar"
        startStopBtn.classList.remove('stop');
        startStopBtn.innerHTML = '<i data-lucide="play"></i><span>Iniciar</span>';
    }
    
    // Atualiza os √≠cones do Lucide (necess√°rio ap√≥s mudar o HTML)
    lucide.createIcons();
}

// Fun√ß√£o principal do cron√¥metro - roda a cada segundo
function tick() {
    currentTime++;
    updateDisplay();
}

// Fun√ß√£o para iniciar o cron√¥metro
function startTimer() {
    if (!isRunning) {
        isRunning = true;
        // setInterval executa a fun√ß√£o tick a cada 1000ms (1 segundo)
        intervalId = setInterval(tick, 1000);
        updateStatus();
    }
}

// Fun√ß√£o para parar o cron√¥metro
function stopTimer() {
    if (isRunning) {
        isRunning = false;
        // clearInterval para a execu√ß√£o do setInterval
        clearInterval(intervalId);
        intervalId = null;
        updateStatus();
    }
}

// Fun√ß√£o para resetar o cron√¥metro
function resetTimer() {
    // Para o cron√¥metro se estiver rodando
    stopTimer();
    
    // Salva o tempo atual como √∫ltimo tempo registrado (se for maior que 0)
    if (currentTime > 0) {
        lastRecordedTime = currentTime;
        const lastTime = formatTime(lastRecordedTime);
        lastTimeValue.textContent = `${lastTime.hours}:${lastTime.minutes}:${lastTime.seconds}`;
        lastTimeSection.style.display = 'block'; // Mostra a se√ß√£o do √∫ltimo tempo
    }
    
    // Zera o tempo atual
    currentTime = 0;
    updateDisplay();
    updateStatus();
}

// Event listeners - aqui conecto as fun√ß√µes aos cliques dos bot√µes
startStopBtn.addEventListener('click', function() {
    if (isRunning) {
        stopTimer();
    } else {
        startTimer();
    }
});

resetBtn.addEventListener('click', resetTimer);

// Inicializa√ß√£o - roda quando a p√°gina carrega
document.addEventListener('DOMContentLoaded', function() {
    // Inicializa os √≠cones do Lucide
    lucide.createIcons();
    
    // Atualiza o display inicial
    updateDisplay();
    updateStatus();
    
    console.log('Cron√¥metro inicializado com sucesso! üöÄ');
});

// Fun√ß√£o extra: limpar interval se o usu√°rio sair da p√°gina
// Isso evita memory leaks - aprendi que √© uma boa pr√°tica
window.addEventListener('beforeunload', function() {
    if (intervalId) {
        clearInterval(intervalId);
    }
});